// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HBBmsg.proto

#include "HBBmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_HBBmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBMessageRes_HBBmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBBmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBServiceMap_HBBService_HBBmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBBmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_HBBmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HBBServiceMap_ServiceMapEntry_DoNotUse_HBBmsg_2eproto;
namespace HBBmsg {
class HBBMsgHeadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBMsgHead> _instance;
} _HBBMsgHead_default_instance_;
class HBBMsgHeartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBMsgHeart> _instance;
} _HBBMsgHeart_default_instance_;
class HBBMessageResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBMessageRes> _instance;
} _HBBMessageRes_default_instance_;
class HBBRegisterReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBRegisterReq> _instance;
} _HBBRegisterReq_default_instance_;
class HBBServiceMap_HBBServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBServiceMap_HBBService> _instance;
} _HBBServiceMap_HBBService_default_instance_;
class HBBServiceMap_HBBServiceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBServiceMap_HBBServiceList> _instance;
} _HBBServiceMap_HBBServiceList_default_instance_;
class HBBServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBServiceMap_ServiceMapEntry_DoNotUse> _instance;
} _HBBServiceMap_ServiceMapEntry_DoNotUse_default_instance_;
class HBBServiceMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBServiceMap> _instance;
} _HBBServiceMap_default_instance_;
class HBBGetServiceReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBGetServiceReq> _instance;
} _HBBGetServiceReq_default_instance_;
class HBBAddLogReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBAddLogReq> _instance;
} _HBBAddLogReq_default_instance_;
class HBBLoginReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBLoginReq> _instance;
} _HBBLoginReq_default_instance_;
class HBBLoginResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBBLoginRes> _instance;
} _HBBLoginRes_default_instance_;
}  // namespace HBBmsg
static void InitDefaultsscc_info_HBBAddLogReq_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBAddLogReq_default_instance_;
    new (ptr) ::HBBmsg::HBBAddLogReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBAddLogReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBAddLogReq_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBAddLogReq_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBGetServiceReq_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBGetServiceReq_default_instance_;
    new (ptr) ::HBBmsg::HBBGetServiceReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBGetServiceReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBGetServiceReq_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBGetServiceReq_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBLoginReq_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBLoginReq_default_instance_;
    new (ptr) ::HBBmsg::HBBLoginReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBLoginReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBLoginReq_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBLoginReq_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBLoginRes_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBLoginRes_default_instance_;
    new (ptr) ::HBBmsg::HBBLoginRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBLoginRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBLoginRes_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBLoginRes_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBMessageRes_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBMessageRes_default_instance_;
    new (ptr) ::HBBmsg::HBBMessageRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBMessageRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBMessageRes_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBMessageRes_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBMsgHead_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBMsgHead_default_instance_;
    new (ptr) ::HBBmsg::HBBMsgHead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBMsgHead::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBMsgHead_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBMsgHead_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBMsgHeart_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBMsgHeart_default_instance_;
    new (ptr) ::HBBmsg::HBBMsgHeart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBMsgHeart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBMsgHeart_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBMsgHeart_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBRegisterReq_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBRegisterReq_default_instance_;
    new (ptr) ::HBBmsg::HBBRegisterReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBRegisterReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBRegisterReq_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBRegisterReq_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBServiceMap_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBServiceMap_default_instance_;
    new (ptr) ::HBBmsg::HBBServiceMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBServiceMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HBBServiceMap_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_HBBServiceMap_HBBmsg_2eproto}, {
      &scc_info_HBBServiceMap_ServiceMapEntry_DoNotUse_HBBmsg_2eproto.base,
      &scc_info_HBBMessageRes_HBBmsg_2eproto.base,}};

static void InitDefaultsscc_info_HBBServiceMap_HBBService_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBServiceMap_HBBService_default_instance_;
    new (ptr) ::HBBmsg::HBBServiceMap_HBBService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBServiceMap_HBBService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBBServiceMap_HBBService_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HBBServiceMap_HBBService_HBBmsg_2eproto}, {}};

static void InitDefaultsscc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBServiceMap_HBBServiceList_default_instance_;
    new (ptr) ::HBBmsg::HBBServiceMap_HBBServiceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HBBmsg::HBBServiceMap_HBBServiceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto}, {
      &scc_info_HBBServiceMap_HBBService_HBBmsg_2eproto.base,}};

static void InitDefaultsscc_info_HBBServiceMap_ServiceMapEntry_DoNotUse_HBBmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HBBmsg::_HBBServiceMap_ServiceMapEntry_DoNotUse_default_instance_;
    new (ptr) ::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse();
  }
  ::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HBBServiceMap_ServiceMapEntry_DoNotUse_HBBmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HBBServiceMap_ServiceMapEntry_DoNotUse_HBBmsg_2eproto}, {
      &scc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_HBBmsg_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_HBBmsg_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_HBBmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_HBBmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMsgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMsgHead, msg_size_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMsgHead, msg_type_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMsgHead, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMsgHeart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMsgHeart, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMessageRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMessageRes, return__),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBMessageRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBRegisterReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBRegisterReq, name_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBRegisterReq, port_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBRegisterReq, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_HBBService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_HBBService, name_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_HBBService, ip_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_HBBService, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_HBBServiceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_HBBServiceList, service_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap, service_map_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap, res_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBServiceMap, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBGetServiceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBGetServiceReq, name_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBGetServiceReq, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, service_ip_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, service_port_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, service_name_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, log_txt_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, log_time_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, log_level_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, filename_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBAddLogReq, line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginReq, username_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginReq, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginRes, res_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginRes, token_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginRes, expired_time_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginRes, rolename_),
  PROTOBUF_FIELD_OFFSET(::HBBmsg::HBBLoginRes, username_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::HBBmsg::HBBMsgHead)},
  { 8, -1, sizeof(::HBBmsg::HBBMsgHeart)},
  { 14, -1, sizeof(::HBBmsg::HBBMessageRes)},
  { 21, -1, sizeof(::HBBmsg::HBBRegisterReq)},
  { 29, -1, sizeof(::HBBmsg::HBBServiceMap_HBBService)},
  { 37, -1, sizeof(::HBBmsg::HBBServiceMap_HBBServiceList)},
  { 43, 50, sizeof(::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse)},
  { 52, -1, sizeof(::HBBmsg::HBBServiceMap)},
  { 60, -1, sizeof(::HBBmsg::HBBGetServiceReq)},
  { 67, -1, sizeof(::HBBmsg::HBBAddLogReq)},
  { 80, -1, sizeof(::HBBmsg::HBBLoginReq)},
  { 87, -1, sizeof(::HBBmsg::HBBLoginRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBMsgHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBMsgHeart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBMessageRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBRegisterReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBServiceMap_HBBService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBServiceMap_HBBServiceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBServiceMap_ServiceMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBServiceMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBGetServiceReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBAddLogReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBLoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HBBmsg::_HBBLoginRes_default_instance_),
};

const char descriptor_table_protodef_HBBmsg_2eproto[] =
  "\n\014HBBmsg.proto\022\006HBBmsg\032\rHBBtype.proto\"W\n"
  "\nHBBMsgHead\022\020\n\010msg_size\030\001 \001(\005\022!\n\010msg_typ"
  "e\030\002 \001(\0162\017.HBBmsg.MsgType\022\024\n\014service_name"
  "\030\003 \001(\t\"\034\n\013HBBMsgHeart\022\r\n\005count\030\001 \001(\003\"m\n\r"
  "HBBMessageRes\022/\n\006return\030\001 \001(\0162\037.HBBmsg.H"
  "BBMessageRes.HBBReturn\022\013\n\003msg\030\002 \001(\014\"\036\n\tH"
  "BBReturn\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001\"8\n\016HBBRegist"
  "erReq\022\014\n\004name\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\022\n\n\002ip\030"
  "\003 \001(\t\"\351\002\n\rHBBServiceMap\022:\n\013service_map\030\001"
  " \003(\0132%.HBBmsg.HBBServiceMap.ServiceMapEn"
  "try\022\"\n\003res\030\002 \001(\0132\025.HBBmsg.HBBMessageRes\022"
  "$\n\004type\030\003 \001(\0162\026.HBBmsg.HBBServiceType\0324\n"
  "\nHBBService\022\014\n\004name\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n"
  "\004port\030\003 \001(\005\032C\n\016HBBServiceList\0221\n\007service"
  "\030\001 \003(\0132 .HBBmsg.HBBServiceMap.HBBService"
  "\032W\n\017ServiceMapEntry\022\013\n\003key\030\001 \001(\t\0223\n\005valu"
  "e\030\002 \001(\0132$.HBBmsg.HBBServiceMap.HBBServic"
  "eList:\0028\001\"F\n\020HBBGetServiceReq\022\014\n\004name\030\001 "
  "\001(\t\022$\n\004type\030\002 \001(\0162\026.HBBmsg.HBBServiceTyp"
  "e\"\271\001\n\014HBBAddLogReq\022\022\n\nservice_ip\030\001 \001(\t\022\024"
  "\n\014service_port\030\002 \001(\005\022\024\n\014service_name\030\003 \001"
  "(\t\022\017\n\007log_txt\030\004 \001(\014\022\020\n\010log_time\030\005 \001(\005\022&\n"
  "\tlog_level\030\006 \001(\0162\023.HBBmsg.HBBLogLevel\022\020\n"
  "\010filename\030\007 \001(\t\022\014\n\004line\030\010 \001(\005\"1\n\013HBBLogi"
  "nReq\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t"
  "\"\343\001\n\013HBBLoginRes\0220\n\003res\030\001 \001(\0162#.HBBmsg.H"
  "BBLoginRes.HBBLoginResType\022\r\n\005token\030\002 \001("
  "\t\022\024\n\014expired_time\030\003 \001(\005\022\020\n\010rolename\030\004 \001("
  "\t\022\020\n\010username\030\005 \001(\t\"Y\n\017HBBLoginResType\022\010"
  "\n\004NONE\020\000\022\013\n\007LOGGING\020\001\022\006\n\002OK\020\002\022\t\n\005ERROR\020\003"
  "\022\n\n\006NOUSER\020\004\022\020\n\014SERVER_ERROR\020\005*\"\n\016HBBSer"
  "viceType\022\007\n\003ONE\020\000\022\007\n\003ALL\020\001*L\n\013HBBLogLeve"
  "l\022\016\n\nXLOG_DEBUG\020\000\022\r\n\tXLOG_INFO\020\001\022\016\n\nXLOG"
  "_ERROR\020\002\022\016\n\nXLOG_FATAL\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_HBBmsg_2eproto_deps[1] = {
  &::descriptor_table_HBBtype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_HBBmsg_2eproto_sccs[12] = {
  &scc_info_HBBAddLogReq_HBBmsg_2eproto.base,
  &scc_info_HBBGetServiceReq_HBBmsg_2eproto.base,
  &scc_info_HBBLoginReq_HBBmsg_2eproto.base,
  &scc_info_HBBLoginRes_HBBmsg_2eproto.base,
  &scc_info_HBBMessageRes_HBBmsg_2eproto.base,
  &scc_info_HBBMsgHead_HBBmsg_2eproto.base,
  &scc_info_HBBMsgHeart_HBBmsg_2eproto.base,
  &scc_info_HBBRegisterReq_HBBmsg_2eproto.base,
  &scc_info_HBBServiceMap_HBBmsg_2eproto.base,
  &scc_info_HBBServiceMap_HBBService_HBBmsg_2eproto.base,
  &scc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto.base,
  &scc_info_HBBServiceMap_ServiceMapEntry_DoNotUse_HBBmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_HBBmsg_2eproto_once;
static bool descriptor_table_HBBmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HBBmsg_2eproto = {
  &descriptor_table_HBBmsg_2eproto_initialized, descriptor_table_protodef_HBBmsg_2eproto, "HBBmsg.proto", 1352,
  &descriptor_table_HBBmsg_2eproto_once, descriptor_table_HBBmsg_2eproto_sccs, descriptor_table_HBBmsg_2eproto_deps, 12, 1,
  schemas, file_default_instances, TableStruct_HBBmsg_2eproto::offsets,
  file_level_metadata_HBBmsg_2eproto, 12, file_level_enum_descriptors_HBBmsg_2eproto, file_level_service_descriptors_HBBmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_HBBmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_HBBmsg_2eproto), true);
namespace HBBmsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBMessageRes_HBBReturn_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HBBmsg_2eproto);
  return file_level_enum_descriptors_HBBmsg_2eproto[0];
}
bool HBBMessageRes_HBBReturn_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HBBMessageRes_HBBReturn HBBMessageRes::OK;
constexpr HBBMessageRes_HBBReturn HBBMessageRes::ERROR;
constexpr HBBMessageRes_HBBReturn HBBMessageRes::HBBReturn_MIN;
constexpr HBBMessageRes_HBBReturn HBBMessageRes::HBBReturn_MAX;
constexpr int HBBMessageRes::HBBReturn_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBLoginRes_HBBLoginResType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HBBmsg_2eproto);
  return file_level_enum_descriptors_HBBmsg_2eproto[1];
}
bool HBBLoginRes_HBBLoginResType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::NONE;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::LOGGING;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::OK;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::ERROR;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::NOUSER;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::SERVER_ERROR;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::HBBLoginResType_MIN;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes::HBBLoginResType_MAX;
constexpr int HBBLoginRes::HBBLoginResType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBServiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HBBmsg_2eproto);
  return file_level_enum_descriptors_HBBmsg_2eproto[2];
}
bool HBBServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBLogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HBBmsg_2eproto);
  return file_level_enum_descriptors_HBBmsg_2eproto[3];
}
bool HBBLogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HBBMsgHead::InitAsDefaultInstance() {
}
class HBBMsgHead::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBMsgHead::kMsgSizeFieldNumber;
const int HBBMsgHead::kMsgTypeFieldNumber;
const int HBBMsgHead::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBMsgHead::HBBMsgHead()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBMsgHead)
}
HBBMsgHead::HBBMsgHead(const HBBMsgHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  ::memcpy(&msg_size_, &from.msg_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_size_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBMsgHead)
}

void HBBMsgHead::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBMsgHead_HBBmsg_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msg_size_)) + sizeof(msg_type_));
}

HBBMsgHead::~HBBMsgHead() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBMsgHead)
  SharedDtor();
}

void HBBMsgHead::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBMsgHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBMsgHead& HBBMsgHead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBMsgHead_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBMsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBMsgHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msg_size_)) + sizeof(msg_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBMsgHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msg_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .HBBmsg.MsgType msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_msg_type(static_cast<::HBBmsg::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // string service_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_service_name(), ptr, ctx, "HBBmsg.HBBMsgHead.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBMsgHead::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBMsgHead)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 msg_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HBBmsg.MsgType msg_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::HBBmsg::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBMsgHead.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBMsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBMsgHead)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBMsgHead::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBMsgHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_size = 1;
  if (this->msg_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->msg_size(), output);
  }

  // .HBBmsg.MsgType msg_type = 2;
  if (this->msg_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBMsgHead.service_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBMsgHead)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBMsgHead::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBMsgHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_size = 1;
  if (this->msg_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_size(), target);
  }

  // .HBBmsg.MsgType msg_type = 2;
  if (this->msg_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBMsgHead.service_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->service_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBMsgHead)
  return target;
}

size_t HBBMsgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBMsgHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // int32 msg_size = 1;
  if (this->msg_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->msg_size());
  }

  // .HBBmsg.MsgType msg_type = 2;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBMsgHead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBMsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBMsgHead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBMsgHead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBMsgHead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBMsgHead)
    MergeFrom(*source);
  }
}

void HBBMsgHead::MergeFrom(const HBBMsgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBMsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.msg_size() != 0) {
    set_msg_size(from.msg_size());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void HBBMsgHead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBMsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBMsgHead::CopyFrom(const HBBMsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBMsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBMsgHead::IsInitialized() const {
  return true;
}

void HBBMsgHead::Swap(HBBMsgHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBMsgHead::InternalSwap(HBBMsgHead* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_size_, other->msg_size_);
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBMsgHead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBMsgHeart::InitAsDefaultInstance() {
}
class HBBMsgHeart::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBMsgHeart::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBMsgHeart::HBBMsgHeart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBMsgHeart)
}
HBBMsgHeart::HBBMsgHeart(const HBBMsgHeart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBMsgHeart)
}

void HBBMsgHeart::SharedCtor() {
  count_ = PROTOBUF_LONGLONG(0);
}

HBBMsgHeart::~HBBMsgHeart() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBMsgHeart)
  SharedDtor();
}

void HBBMsgHeart::SharedDtor() {
}

void HBBMsgHeart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBMsgHeart& HBBMsgHeart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBMsgHeart_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBMsgHeart::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBMsgHeart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBMsgHeart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBMsgHeart::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBMsgHeart)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBMsgHeart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBMsgHeart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBMsgHeart::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBMsgHeart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBMsgHeart)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBMsgHeart::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBMsgHeart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBMsgHeart)
  return target;
}

size_t HBBMsgHeart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBMsgHeart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBMsgHeart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBMsgHeart)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBMsgHeart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBMsgHeart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBMsgHeart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBMsgHeart)
    MergeFrom(*source);
  }
}

void HBBMsgHeart::MergeFrom(const HBBMsgHeart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBMsgHeart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void HBBMsgHeart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBMsgHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBMsgHeart::CopyFrom(const HBBMsgHeart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBMsgHeart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBMsgHeart::IsInitialized() const {
  return true;
}

void HBBMsgHeart::Swap(HBBMsgHeart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBMsgHeart::InternalSwap(HBBMsgHeart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBMsgHeart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBMessageRes::InitAsDefaultInstance() {
}
class HBBMessageRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBMessageRes::kReturnFieldNumber;
const int HBBMessageRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBMessageRes::HBBMessageRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBMessageRes)
}
HBBMessageRes::HBBMessageRes(const HBBMessageRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  return__ = from.return__;
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBMessageRes)
}

void HBBMessageRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBMessageRes_HBBmsg_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return__ = 0;
}

HBBMessageRes::~HBBMessageRes() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBMessageRes)
  SharedDtor();
}

void HBBMessageRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBMessageRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBMessageRes& HBBMessageRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBMessageRes_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBMessageRes::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBMessageRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return__ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBMessageRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .HBBmsg.HBBMessageRes.HBBReturn return = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_return_(static_cast<::HBBmsg::HBBMessageRes_HBBReturn>(val));
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_msg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBMessageRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBMessageRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .HBBmsg.HBBMessageRes.HBBReturn return = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_return_(static_cast< ::HBBmsg::HBBMessageRes_HBBReturn >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBMessageRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBMessageRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBMessageRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBMessageRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HBBmsg.HBBMessageRes.HBBReturn return = 1;
  if (this->return_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->return_(), output);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBMessageRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBMessageRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBMessageRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HBBmsg.HBBMessageRes.HBBReturn return = 1;
  if (this->return_() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->return_(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBMessageRes)
  return target;
}

size_t HBBMessageRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBMessageRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // .HBBmsg.HBBMessageRes.HBBReturn return = 1;
  if (this->return_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->return_());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBMessageRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBMessageRes)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBMessageRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBMessageRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBMessageRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBMessageRes)
    MergeFrom(*source);
  }
}

void HBBMessageRes::MergeFrom(const HBBMessageRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBMessageRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.return_() != 0) {
    set_return_(from.return_());
  }
}

void HBBMessageRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBMessageRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBMessageRes::CopyFrom(const HBBMessageRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBMessageRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBMessageRes::IsInitialized() const {
  return true;
}

void HBBMessageRes::Swap(HBBMessageRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBMessageRes::InternalSwap(HBBMessageRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return__, other->return__);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBMessageRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBRegisterReq::InitAsDefaultInstance() {
}
class HBBRegisterReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBRegisterReq::kNameFieldNumber;
const int HBBRegisterReq::kPortFieldNumber;
const int HBBRegisterReq::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBRegisterReq::HBBRegisterReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBRegisterReq)
}
HBBRegisterReq::HBBRegisterReq(const HBBRegisterReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBRegisterReq)
}

void HBBRegisterReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBRegisterReq_HBBmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

HBBRegisterReq::~HBBRegisterReq() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBRegisterReq)
  SharedDtor();
}

void HBBRegisterReq::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBRegisterReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBRegisterReq& HBBRegisterReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBRegisterReq_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBRegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBRegisterReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBRegisterReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "HBBmsg.HBBRegisterReq.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "HBBmsg.HBBRegisterReq.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBRegisterReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBRegisterReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBRegisterReq.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBRegisterReq.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBRegisterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBRegisterReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBRegisterReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBRegisterReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBRegisterReq.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBRegisterReq.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBRegisterReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBRegisterReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBRegisterReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBRegisterReq.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBRegisterReq.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBRegisterReq)
  return target;
}

size_t HBBRegisterReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBRegisterReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBRegisterReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBRegisterReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBRegisterReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBRegisterReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBRegisterReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBRegisterReq)
    MergeFrom(*source);
  }
}

void HBBRegisterReq::MergeFrom(const HBBRegisterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBRegisterReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void HBBRegisterReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBRegisterReq::CopyFrom(const HBBRegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBRegisterReq::IsInitialized() const {
  return true;
}

void HBBRegisterReq::Swap(HBBRegisterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBRegisterReq::InternalSwap(HBBRegisterReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBRegisterReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBServiceMap_HBBService::InitAsDefaultInstance() {
}
class HBBServiceMap_HBBService::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBServiceMap_HBBService::kNameFieldNumber;
const int HBBServiceMap_HBBService::kIpFieldNumber;
const int HBBServiceMap_HBBService::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBServiceMap_HBBService::HBBServiceMap_HBBService()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBServiceMap.HBBService)
}
HBBServiceMap_HBBService::HBBServiceMap_HBBService(const HBBServiceMap_HBBService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBServiceMap.HBBService)
}

void HBBServiceMap_HBBService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBServiceMap_HBBService_HBBmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

HBBServiceMap_HBBService::~HBBServiceMap_HBBService() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBServiceMap.HBBService)
  SharedDtor();
}

void HBBServiceMap_HBBService::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBServiceMap_HBBService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBServiceMap_HBBService& HBBServiceMap_HBBService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBServiceMap_HBBService_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBServiceMap_HBBService::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBServiceMap.HBBService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBServiceMap_HBBService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "HBBmsg.HBBServiceMap.HBBService.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "HBBmsg.HBBServiceMap.HBBService.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBServiceMap_HBBService::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBServiceMap.HBBService)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBServiceMap.HBBService.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBServiceMap.HBBService.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBServiceMap.HBBService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBServiceMap.HBBService)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBServiceMap_HBBService::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBServiceMap.HBBService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBServiceMap.HBBService.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBServiceMap.HBBService.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBServiceMap.HBBService)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBServiceMap_HBBService::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBServiceMap.HBBService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBServiceMap.HBBService.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBServiceMap.HBBService.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBServiceMap.HBBService)
  return target;
}

size_t HBBServiceMap_HBBService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBServiceMap.HBBService)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBServiceMap_HBBService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBServiceMap.HBBService)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBServiceMap_HBBService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBServiceMap_HBBService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBServiceMap.HBBService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBServiceMap.HBBService)
    MergeFrom(*source);
  }
}

void HBBServiceMap_HBBService::MergeFrom(const HBBServiceMap_HBBService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBServiceMap.HBBService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void HBBServiceMap_HBBService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBServiceMap.HBBService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBServiceMap_HBBService::CopyFrom(const HBBServiceMap_HBBService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBServiceMap.HBBService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBServiceMap_HBBService::IsInitialized() const {
  return true;
}

void HBBServiceMap_HBBService::Swap(HBBServiceMap_HBBService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBServiceMap_HBBService::InternalSwap(HBBServiceMap_HBBService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBServiceMap_HBBService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBServiceMap_HBBServiceList::InitAsDefaultInstance() {
}
class HBBServiceMap_HBBServiceList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBServiceMap_HBBServiceList::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBServiceMap_HBBServiceList::HBBServiceMap_HBBServiceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBServiceMap.HBBServiceList)
}
HBBServiceMap_HBBServiceList::HBBServiceMap_HBBServiceList(const HBBServiceMap_HBBServiceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      service_(from.service_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBServiceMap.HBBServiceList)
}

void HBBServiceMap_HBBServiceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto.base);
}

HBBServiceMap_HBBServiceList::~HBBServiceMap_HBBServiceList() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBServiceMap.HBBServiceList)
  SharedDtor();
}

void HBBServiceMap_HBBServiceList::SharedDtor() {
}

void HBBServiceMap_HBBServiceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBServiceMap_HBBServiceList& HBBServiceMap_HBBServiceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBServiceMap_HBBServiceList_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBServiceMap_HBBServiceList::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBServiceMap.HBBServiceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBServiceMap_HBBServiceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HBBmsg.HBBServiceMap.HBBService service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_service(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBServiceMap_HBBServiceList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBServiceMap.HBBServiceList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HBBmsg.HBBServiceMap.HBBService service = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBServiceMap.HBBServiceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBServiceMap.HBBServiceList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBServiceMap_HBBServiceList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBServiceMap.HBBServiceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HBBmsg.HBBServiceMap.HBBService service = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->service_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->service(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBServiceMap.HBBServiceList)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBServiceMap_HBBServiceList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBServiceMap.HBBServiceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HBBmsg.HBBServiceMap.HBBService service = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->service_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->service(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBServiceMap.HBBServiceList)
  return target;
}

size_t HBBServiceMap_HBBServiceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBServiceMap.HBBServiceList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HBBmsg.HBBServiceMap.HBBService service = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->service_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->service(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBServiceMap_HBBServiceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBServiceMap.HBBServiceList)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBServiceMap_HBBServiceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBServiceMap_HBBServiceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBServiceMap.HBBServiceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBServiceMap.HBBServiceList)
    MergeFrom(*source);
  }
}

void HBBServiceMap_HBBServiceList::MergeFrom(const HBBServiceMap_HBBServiceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBServiceMap.HBBServiceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_.MergeFrom(from.service_);
}

void HBBServiceMap_HBBServiceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBServiceMap.HBBServiceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBServiceMap_HBBServiceList::CopyFrom(const HBBServiceMap_HBBServiceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBServiceMap.HBBServiceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBServiceMap_HBBServiceList::IsInitialized() const {
  return true;
}

void HBBServiceMap_HBBServiceList::Swap(HBBServiceMap_HBBServiceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBServiceMap_HBBServiceList::InternalSwap(HBBServiceMap_HBBServiceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&service_)->InternalSwap(CastToBase(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBServiceMap_HBBServiceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HBBServiceMap_ServiceMapEntry_DoNotUse::HBBServiceMap_ServiceMapEntry_DoNotUse() {}
HBBServiceMap_ServiceMapEntry_DoNotUse::HBBServiceMap_ServiceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HBBServiceMap_ServiceMapEntry_DoNotUse::MergeFrom(const HBBServiceMap_ServiceMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HBBServiceMap_ServiceMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HBBServiceMap_ServiceMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HBBServiceMap::InitAsDefaultInstance() {
  ::HBBmsg::_HBBServiceMap_default_instance_._instance.get_mutable()->res_ = const_cast< ::HBBmsg::HBBMessageRes*>(
      ::HBBmsg::HBBMessageRes::internal_default_instance());
}
class HBBServiceMap::HasBitSetters {
 public:
  static const ::HBBmsg::HBBMessageRes& res(const HBBServiceMap* msg);
};

const ::HBBmsg::HBBMessageRes&
HBBServiceMap::HasBitSetters::res(const HBBServiceMap* msg) {
  return *msg->res_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBServiceMap::kServiceMapFieldNumber;
const int HBBServiceMap::kResFieldNumber;
const int HBBServiceMap::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBServiceMap::HBBServiceMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBServiceMap)
}
HBBServiceMap::HBBServiceMap(const HBBServiceMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_map_.MergeFrom(from.service_map_);
  if (from.has_res()) {
    res_ = new ::HBBmsg::HBBMessageRes(*from.res_);
  } else {
    res_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBServiceMap)
}

void HBBServiceMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBServiceMap_HBBmsg_2eproto.base);
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&res_)) + sizeof(type_));
}

HBBServiceMap::~HBBServiceMap() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBServiceMap)
  SharedDtor();
}

void HBBServiceMap::SharedDtor() {
  if (this != internal_default_instance()) delete res_;
}

void HBBServiceMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBServiceMap& HBBServiceMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBServiceMap_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBServiceMap::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBServiceMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_map_.Clear();
  if (GetArenaNoVirtual() == nullptr && res_ != nullptr) {
    delete res_;
  }
  res_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBServiceMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .HBBmsg.HBBServiceMap.HBBServiceList> service_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&service_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .HBBmsg.HBBMessageRes res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .HBBmsg.HBBServiceType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::HBBmsg::HBBServiceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBServiceMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBServiceMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .HBBmsg.HBBServiceMap.HBBServiceList> service_map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          HBBServiceMap_ServiceMapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              HBBServiceMap_ServiceMapEntry_DoNotUse,
              std::string, ::HBBmsg::HBBServiceMap_HBBServiceList,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList > > parser(&service_map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBServiceMap.ServiceMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HBBmsg.HBBMessageRes res = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HBBmsg.HBBServiceType type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::HBBmsg::HBBServiceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBServiceMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBServiceMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBServiceMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBServiceMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .HBBmsg.HBBServiceMap.HBBServiceList> service_map = 1;
  if (!this->service_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "HBBmsg.HBBServiceMap.ServiceMapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->service_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->service_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::const_iterator
          it = this->service_map().begin();
          it != this->service_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        HBBServiceMap_ServiceMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::const_iterator
          it = this->service_map().begin();
          it != this->service_map().end(); ++it) {
        HBBServiceMap_ServiceMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .HBBmsg.HBBMessageRes res = 2;
  if (this->has_res()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::res(this), output);
  }

  // .HBBmsg.HBBServiceType type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBServiceMap)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBServiceMap::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBServiceMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .HBBmsg.HBBServiceMap.HBBServiceList> service_map = 1;
  if (!this->service_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "HBBmsg.HBBServiceMap.ServiceMapEntry.key");
      }
    };

    if (false &&
        this->service_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->service_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::const_iterator
          it = this->service_map().begin();
          it != this->service_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        HBBServiceMap_ServiceMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::const_iterator
          it = this->service_map().begin();
          it != this->service_map().end(); ++it) {
        HBBServiceMap_ServiceMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .HBBmsg.HBBMessageRes res = 2;
  if (this->has_res()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::res(this), target);
  }

  // .HBBmsg.HBBServiceType type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBServiceMap)
  return target;
}

size_t HBBServiceMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBServiceMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .HBBmsg.HBBServiceMap.HBBServiceList> service_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->service_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >::const_iterator
      it = this->service_map().begin();
      it != this->service_map().end(); ++it) {
    HBBServiceMap_ServiceMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // .HBBmsg.HBBMessageRes res = 2;
  if (this->has_res()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *res_);
  }

  // .HBBmsg.HBBServiceType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBServiceMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBServiceMap)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBServiceMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBServiceMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBServiceMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBServiceMap)
    MergeFrom(*source);
  }
}

void HBBServiceMap::MergeFrom(const HBBServiceMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBServiceMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_map_.MergeFrom(from.service_map_);
  if (from.has_res()) {
    mutable_res()->::HBBmsg::HBBMessageRes::MergeFrom(from.res());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void HBBServiceMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBServiceMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBServiceMap::CopyFrom(const HBBServiceMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBServiceMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBServiceMap::IsInitialized() const {
  return true;
}

void HBBServiceMap::Swap(HBBServiceMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBServiceMap::InternalSwap(HBBServiceMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_map_.Swap(&other->service_map_);
  swap(res_, other->res_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBServiceMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBGetServiceReq::InitAsDefaultInstance() {
}
class HBBGetServiceReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBGetServiceReq::kNameFieldNumber;
const int HBBGetServiceReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBGetServiceReq::HBBGetServiceReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBGetServiceReq)
}
HBBGetServiceReq::HBBGetServiceReq(const HBBGetServiceReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBGetServiceReq)
}

void HBBGetServiceReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBGetServiceReq_HBBmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

HBBGetServiceReq::~HBBGetServiceReq() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBGetServiceReq)
  SharedDtor();
}

void HBBGetServiceReq::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBGetServiceReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBGetServiceReq& HBBGetServiceReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBGetServiceReq_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBGetServiceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBGetServiceReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBGetServiceReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "HBBmsg.HBBGetServiceReq.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .HBBmsg.HBBServiceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::HBBmsg::HBBServiceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBGetServiceReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBGetServiceReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBGetServiceReq.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HBBmsg.HBBServiceType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::HBBmsg::HBBServiceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBGetServiceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBGetServiceReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBGetServiceReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBGetServiceReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBGetServiceReq.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .HBBmsg.HBBServiceType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBGetServiceReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBGetServiceReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBGetServiceReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBGetServiceReq.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .HBBmsg.HBBServiceType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBGetServiceReq)
  return target;
}

size_t HBBGetServiceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBGetServiceReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .HBBmsg.HBBServiceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBGetServiceReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBGetServiceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBGetServiceReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBGetServiceReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBGetServiceReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBGetServiceReq)
    MergeFrom(*source);
  }
}

void HBBGetServiceReq::MergeFrom(const HBBGetServiceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBGetServiceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void HBBGetServiceReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBGetServiceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBGetServiceReq::CopyFrom(const HBBGetServiceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBGetServiceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBGetServiceReq::IsInitialized() const {
  return true;
}

void HBBGetServiceReq::Swap(HBBGetServiceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBGetServiceReq::InternalSwap(HBBGetServiceReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBGetServiceReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBAddLogReq::InitAsDefaultInstance() {
}
class HBBAddLogReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBAddLogReq::kServiceIpFieldNumber;
const int HBBAddLogReq::kServicePortFieldNumber;
const int HBBAddLogReq::kServiceNameFieldNumber;
const int HBBAddLogReq::kLogTxtFieldNumber;
const int HBBAddLogReq::kLogTimeFieldNumber;
const int HBBAddLogReq::kLogLevelFieldNumber;
const int HBBAddLogReq::kFilenameFieldNumber;
const int HBBAddLogReq::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBAddLogReq::HBBAddLogReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBAddLogReq)
}
HBBAddLogReq::HBBAddLogReq(const HBBAddLogReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.service_ip().size() > 0) {
    service_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_ip_);
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  log_txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.log_txt().size() > 0) {
    log_txt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_txt_);
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&service_port_, &from.service_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_) -
    reinterpret_cast<char*>(&service_port_)) + sizeof(line_));
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBAddLogReq)
}

void HBBAddLogReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBAddLogReq_HBBmsg_2eproto.base);
  service_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_txt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&service_port_)) + sizeof(line_));
}

HBBAddLogReq::~HBBAddLogReq() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBAddLogReq)
  SharedDtor();
}

void HBBAddLogReq::SharedDtor() {
  service_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_txt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBAddLogReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBAddLogReq& HBBAddLogReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBAddLogReq_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBAddLogReq::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBAddLogReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_txt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&service_port_)) + sizeof(line_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBAddLogReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_service_ip(), ptr, ctx, "HBBmsg.HBBAddLogReq.service_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 service_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          service_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_service_name(), ptr, ctx, "HBBmsg.HBBAddLogReq.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes log_txt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_log_txt(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 log_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          log_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .HBBmsg.HBBLogLevel log_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_log_level(static_cast<::HBBmsg::HBBLogLevel>(val));
        } else goto handle_unusual;
        continue;
      // string filename = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "HBBmsg.HBBAddLogReq.filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBAddLogReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBAddLogReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_ip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_ip().data(), static_cast<int>(this->service_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBAddLogReq.service_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 service_port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBAddLogReq.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes log_txt = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log_txt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 log_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HBBmsg.HBBLogLevel log_level = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_log_level(static_cast< ::HBBmsg::HBBLogLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBAddLogReq.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBAddLogReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBAddLogReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBAddLogReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBAddLogReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_ip = 1;
  if (this->service_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_ip().data(), static_cast<int>(this->service_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBAddLogReq.service_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_ip(), output);
  }

  // int32 service_port = 2;
  if (this->service_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->service_port(), output);
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBAddLogReq.service_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service_name(), output);
  }

  // bytes log_txt = 4;
  if (this->log_txt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->log_txt(), output);
  }

  // int32 log_time = 5;
  if (this->log_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->log_time(), output);
  }

  // .HBBmsg.HBBLogLevel log_level = 6;
  if (this->log_level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->log_level(), output);
  }

  // string filename = 7;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBAddLogReq.filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // int32 line = 8;
  if (this->line() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->line(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBAddLogReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBAddLogReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBAddLogReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_ip = 1;
  if (this->service_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_ip().data(), static_cast<int>(this->service_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBAddLogReq.service_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->service_ip(), target);
  }

  // int32 service_port = 2;
  if (this->service_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->service_port(), target);
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBAddLogReq.service_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->service_name(), target);
  }

  // bytes log_txt = 4;
  if (this->log_txt().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->log_txt(), target);
  }

  // int32 log_time = 5;
  if (this->log_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->log_time(), target);
  }

  // .HBBmsg.HBBLogLevel log_level = 6;
  if (this->log_level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->log_level(), target);
  }

  // string filename = 7;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBAddLogReq.filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // int32 line = 8;
  if (this->line() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->line(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBAddLogReq)
  return target;
}

size_t HBBAddLogReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBAddLogReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_ip = 1;
  if (this->service_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_ip());
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // bytes log_txt = 4;
  if (this->log_txt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->log_txt());
  }

  // string filename = 7;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 service_port = 2;
  if (this->service_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->service_port());
  }

  // int32 log_time = 5;
  if (this->log_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->log_time());
  }

  // .HBBmsg.HBBLogLevel log_level = 6;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->log_level());
  }

  // int32 line = 8;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->line());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBAddLogReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBAddLogReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBAddLogReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBAddLogReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBAddLogReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBAddLogReq)
    MergeFrom(*source);
  }
}

void HBBAddLogReq::MergeFrom(const HBBAddLogReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBAddLogReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_ip().size() > 0) {

    service_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_ip_);
  }
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.log_txt().size() > 0) {

    log_txt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_txt_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.service_port() != 0) {
    set_service_port(from.service_port());
  }
  if (from.log_time() != 0) {
    set_log_time(from.log_time());
  }
  if (from.log_level() != 0) {
    set_log_level(from.log_level());
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
}

void HBBAddLogReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBAddLogReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBAddLogReq::CopyFrom(const HBBAddLogReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBAddLogReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBAddLogReq::IsInitialized() const {
  return true;
}

void HBBAddLogReq::Swap(HBBAddLogReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBAddLogReq::InternalSwap(HBBAddLogReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_ip_.Swap(&other->service_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_txt_.Swap(&other->log_txt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(service_port_, other->service_port_);
  swap(log_time_, other->log_time_);
  swap(log_level_, other->log_level_);
  swap(line_, other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBAddLogReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBLoginReq::InitAsDefaultInstance() {
}
class HBBLoginReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBLoginReq::kUsernameFieldNumber;
const int HBBLoginReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBLoginReq::HBBLoginReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBLoginReq)
}
HBBLoginReq::HBBLoginReq(const HBBLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBLoginReq)
}

void HBBLoginReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBLoginReq_HBBmsg_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HBBLoginReq::~HBBLoginReq() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBLoginReq)
  SharedDtor();
}

void HBBLoginReq::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBLoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBLoginReq& HBBLoginReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBLoginReq_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBLoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_username(), ptr, ctx, "HBBmsg.HBBLoginReq.username");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_password(), ptr, ctx, "HBBmsg.HBBLoginReq.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBLoginReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBLoginReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBLoginReq.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBLoginReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBLoginReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBLoginReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginReq.username");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginReq.password");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBLoginReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBLoginReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginReq.username");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginReq.password");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBLoginReq)
  return target;
}

size_t HBBLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBLoginReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBLoginReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBLoginReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBLoginReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBLoginReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBLoginReq)
    MergeFrom(*source);
  }
}

void HBBLoginReq::MergeFrom(const HBBLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void HBBLoginReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBLoginReq::CopyFrom(const HBBLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBLoginReq::IsInitialized() const {
  return true;
}

void HBBLoginReq::Swap(HBBLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBLoginReq::InternalSwap(HBBLoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBLoginReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HBBLoginRes::InitAsDefaultInstance() {
}
class HBBLoginRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HBBLoginRes::kResFieldNumber;
const int HBBLoginRes::kTokenFieldNumber;
const int HBBLoginRes::kExpiredTimeFieldNumber;
const int HBBLoginRes::kRolenameFieldNumber;
const int HBBLoginRes::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HBBLoginRes::HBBLoginRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HBBmsg.HBBLoginRes)
}
HBBLoginRes::HBBLoginRes(const HBBLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.rolename().size() > 0) {
    rolename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&res_, &from.res_,
    static_cast<size_t>(reinterpret_cast<char*>(&expired_time_) -
    reinterpret_cast<char*>(&res_)) + sizeof(expired_time_));
  // @@protoc_insertion_point(copy_constructor:HBBmsg.HBBLoginRes)
}

void HBBLoginRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBBLoginRes_HBBmsg_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expired_time_) -
      reinterpret_cast<char*>(&res_)) + sizeof(expired_time_));
}

HBBLoginRes::~HBBLoginRes() {
  // @@protoc_insertion_point(destructor:HBBmsg.HBBLoginRes)
  SharedDtor();
}

void HBBLoginRes::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBBLoginRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBBLoginRes& HBBLoginRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBBLoginRes_HBBmsg_2eproto.base);
  return *internal_default_instance();
}


void HBBLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:HBBmsg.HBBLoginRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rolename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expired_time_) -
      reinterpret_cast<char*>(&res_)) + sizeof(expired_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HBBLoginRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .HBBmsg.HBBLoginRes.HBBLoginResType res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_res(static_cast<::HBBmsg::HBBLoginRes_HBBLoginResType>(val));
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_token(), ptr, ctx, "HBBmsg.HBBLoginRes.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expired_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expired_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rolename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_rolename(), ptr, ctx, "HBBmsg.HBBLoginRes.rolename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_username(), ptr, ctx, "HBBmsg.HBBLoginRes.username");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HBBLoginRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:HBBmsg.HBBLoginRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .HBBmsg.HBBLoginRes.HBBLoginResType res = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_res(static_cast< ::HBBmsg::HBBLoginRes_HBBLoginResType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBLoginRes.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expired_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rolename = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->rolename().data(), static_cast<int>(this->rolename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBLoginRes.rolename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "HBBmsg.HBBLoginRes.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HBBmsg.HBBLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HBBmsg.HBBLoginRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HBBLoginRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HBBmsg.HBBLoginRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HBBmsg.HBBLoginRes.HBBLoginResType res = 1;
  if (this->res() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->res(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginRes.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // int32 expired_time = 3;
  if (this->expired_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->expired_time(), output);
  }

  // string rolename = 4;
  if (this->rolename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), static_cast<int>(this->rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginRes.rolename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rolename(), output);
  }

  // string username = 5;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginRes.username");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HBBmsg.HBBLoginRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* HBBLoginRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HBBmsg.HBBLoginRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HBBmsg.HBBLoginRes.HBBLoginResType res = 1;
  if (this->res() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->res(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginRes.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // int32 expired_time = 3;
  if (this->expired_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->expired_time(), target);
  }

  // string rolename = 4;
  if (this->rolename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rolename().data(), static_cast<int>(this->rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginRes.rolename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->rolename(), target);
  }

  // string username = 5;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HBBmsg.HBBLoginRes.username");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HBBmsg.HBBLoginRes)
  return target;
}

size_t HBBLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HBBmsg.HBBLoginRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string rolename = 4;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->rolename());
  }

  // string username = 5;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());
  }

  // .HBBmsg.HBBLoginRes.HBBLoginResType res = 1;
  if (this->res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->res());
  }

  // int32 expired_time = 3;
  if (this->expired_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->expired_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBBLoginRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HBBmsg.HBBLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  const HBBLoginRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBBLoginRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HBBmsg.HBBLoginRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HBBmsg.HBBLoginRes)
    MergeFrom(*source);
  }
}

void HBBLoginRes::MergeFrom(const HBBLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HBBmsg.HBBLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.rolename().size() > 0) {

    rolename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rolename_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
  if (from.expired_time() != 0) {
    set_expired_time(from.expired_time());
  }
}

void HBBLoginRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HBBmsg.HBBLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBBLoginRes::CopyFrom(const HBBLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HBBmsg.HBBLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBBLoginRes::IsInitialized() const {
  return true;
}

void HBBLoginRes::Swap(HBBLoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HBBLoginRes::InternalSwap(HBBLoginRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rolename_.Swap(&other->rolename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(res_, other->res_);
  swap(expired_time_, other->expired_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HBBLoginRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace HBBmsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBMsgHead* Arena::CreateMaybeMessage< ::HBBmsg::HBBMsgHead >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBMsgHead >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBMsgHeart* Arena::CreateMaybeMessage< ::HBBmsg::HBBMsgHeart >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBMsgHeart >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBMessageRes* Arena::CreateMaybeMessage< ::HBBmsg::HBBMessageRes >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBMessageRes >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBRegisterReq* Arena::CreateMaybeMessage< ::HBBmsg::HBBRegisterReq >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBRegisterReq >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBServiceMap_HBBService* Arena::CreateMaybeMessage< ::HBBmsg::HBBServiceMap_HBBService >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBServiceMap_HBBService >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBServiceMap_HBBServiceList* Arena::CreateMaybeMessage< ::HBBmsg::HBBServiceMap_HBBServiceList >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBServiceMap_HBBServiceList >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBServiceMap* Arena::CreateMaybeMessage< ::HBBmsg::HBBServiceMap >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBServiceMap >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBGetServiceReq* Arena::CreateMaybeMessage< ::HBBmsg::HBBGetServiceReq >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBGetServiceReq >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBAddLogReq* Arena::CreateMaybeMessage< ::HBBmsg::HBBAddLogReq >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBAddLogReq >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBLoginReq* Arena::CreateMaybeMessage< ::HBBmsg::HBBLoginReq >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::HBBmsg::HBBLoginRes* Arena::CreateMaybeMessage< ::HBBmsg::HBBLoginRes >(Arena* arena) {
  return Arena::CreateInternal< ::HBBmsg::HBBLoginRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
