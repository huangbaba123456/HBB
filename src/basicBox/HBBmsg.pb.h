// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HBBmsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HBBmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HBBmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "HBBtype.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HBBmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HBBmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HBBmsg_2eproto;
namespace HBBmsg {
class HBBAddLogReq;
class HBBAddLogReqDefaultTypeInternal;
extern HBBAddLogReqDefaultTypeInternal _HBBAddLogReq_default_instance_;
class HBBGetServiceReq;
class HBBGetServiceReqDefaultTypeInternal;
extern HBBGetServiceReqDefaultTypeInternal _HBBGetServiceReq_default_instance_;
class HBBLoginReq;
class HBBLoginReqDefaultTypeInternal;
extern HBBLoginReqDefaultTypeInternal _HBBLoginReq_default_instance_;
class HBBLoginRes;
class HBBLoginResDefaultTypeInternal;
extern HBBLoginResDefaultTypeInternal _HBBLoginRes_default_instance_;
class HBBMessageRes;
class HBBMessageResDefaultTypeInternal;
extern HBBMessageResDefaultTypeInternal _HBBMessageRes_default_instance_;
class HBBMsgHead;
class HBBMsgHeadDefaultTypeInternal;
extern HBBMsgHeadDefaultTypeInternal _HBBMsgHead_default_instance_;
class HBBMsgHeart;
class HBBMsgHeartDefaultTypeInternal;
extern HBBMsgHeartDefaultTypeInternal _HBBMsgHeart_default_instance_;
class HBBRegisterReq;
class HBBRegisterReqDefaultTypeInternal;
extern HBBRegisterReqDefaultTypeInternal _HBBRegisterReq_default_instance_;
class HBBServiceMap;
class HBBServiceMapDefaultTypeInternal;
extern HBBServiceMapDefaultTypeInternal _HBBServiceMap_default_instance_;
class HBBServiceMap_HBBService;
class HBBServiceMap_HBBServiceDefaultTypeInternal;
extern HBBServiceMap_HBBServiceDefaultTypeInternal _HBBServiceMap_HBBService_default_instance_;
class HBBServiceMap_HBBServiceList;
class HBBServiceMap_HBBServiceListDefaultTypeInternal;
extern HBBServiceMap_HBBServiceListDefaultTypeInternal _HBBServiceMap_HBBServiceList_default_instance_;
class HBBServiceMap_ServiceMapEntry_DoNotUse;
class HBBServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal;
extern HBBServiceMap_ServiceMapEntry_DoNotUseDefaultTypeInternal _HBBServiceMap_ServiceMapEntry_DoNotUse_default_instance_;
}  // namespace HBBmsg
PROTOBUF_NAMESPACE_OPEN
template<> ::HBBmsg::HBBAddLogReq* Arena::CreateMaybeMessage<::HBBmsg::HBBAddLogReq>(Arena*);
template<> ::HBBmsg::HBBGetServiceReq* Arena::CreateMaybeMessage<::HBBmsg::HBBGetServiceReq>(Arena*);
template<> ::HBBmsg::HBBLoginReq* Arena::CreateMaybeMessage<::HBBmsg::HBBLoginReq>(Arena*);
template<> ::HBBmsg::HBBLoginRes* Arena::CreateMaybeMessage<::HBBmsg::HBBLoginRes>(Arena*);
template<> ::HBBmsg::HBBMessageRes* Arena::CreateMaybeMessage<::HBBmsg::HBBMessageRes>(Arena*);
template<> ::HBBmsg::HBBMsgHead* Arena::CreateMaybeMessage<::HBBmsg::HBBMsgHead>(Arena*);
template<> ::HBBmsg::HBBMsgHeart* Arena::CreateMaybeMessage<::HBBmsg::HBBMsgHeart>(Arena*);
template<> ::HBBmsg::HBBRegisterReq* Arena::CreateMaybeMessage<::HBBmsg::HBBRegisterReq>(Arena*);
template<> ::HBBmsg::HBBServiceMap* Arena::CreateMaybeMessage<::HBBmsg::HBBServiceMap>(Arena*);
template<> ::HBBmsg::HBBServiceMap_HBBService* Arena::CreateMaybeMessage<::HBBmsg::HBBServiceMap_HBBService>(Arena*);
template<> ::HBBmsg::HBBServiceMap_HBBServiceList* Arena::CreateMaybeMessage<::HBBmsg::HBBServiceMap_HBBServiceList>(Arena*);
template<> ::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse* Arena::CreateMaybeMessage<::HBBmsg::HBBServiceMap_ServiceMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HBBmsg {

enum HBBMessageRes_HBBReturn : int {
  HBBMessageRes_HBBReturn_OK = 0,
  HBBMessageRes_HBBReturn_ERROR = 1,
  HBBMessageRes_HBBReturn_HBBMessageRes_HBBReturn_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HBBMessageRes_HBBReturn_HBBMessageRes_HBBReturn_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HBBMessageRes_HBBReturn_IsValid(int value);
constexpr HBBMessageRes_HBBReturn HBBMessageRes_HBBReturn_HBBReturn_MIN = HBBMessageRes_HBBReturn_OK;
constexpr HBBMessageRes_HBBReturn HBBMessageRes_HBBReturn_HBBReturn_MAX = HBBMessageRes_HBBReturn_ERROR;
constexpr int HBBMessageRes_HBBReturn_HBBReturn_ARRAYSIZE = HBBMessageRes_HBBReturn_HBBReturn_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBMessageRes_HBBReturn_descriptor();
template<typename T>
inline const std::string& HBBMessageRes_HBBReturn_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HBBMessageRes_HBBReturn>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HBBMessageRes_HBBReturn_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HBBMessageRes_HBBReturn_descriptor(), enum_t_value);
}
inline bool HBBMessageRes_HBBReturn_Parse(
    const std::string& name, HBBMessageRes_HBBReturn* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HBBMessageRes_HBBReturn>(
    HBBMessageRes_HBBReturn_descriptor(), name, value);
}
enum HBBLoginRes_HBBLoginResType : int {
  HBBLoginRes_HBBLoginResType_NONE = 0,
  HBBLoginRes_HBBLoginResType_LOGGING = 1,
  HBBLoginRes_HBBLoginResType_OK = 2,
  HBBLoginRes_HBBLoginResType_ERROR = 3,
  HBBLoginRes_HBBLoginResType_NOUSER = 4,
  HBBLoginRes_HBBLoginResType_SERVER_ERROR = 5,
  HBBLoginRes_HBBLoginResType_HBBLoginRes_HBBLoginResType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HBBLoginRes_HBBLoginResType_HBBLoginRes_HBBLoginResType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HBBLoginRes_HBBLoginResType_IsValid(int value);
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes_HBBLoginResType_HBBLoginResType_MIN = HBBLoginRes_HBBLoginResType_NONE;
constexpr HBBLoginRes_HBBLoginResType HBBLoginRes_HBBLoginResType_HBBLoginResType_MAX = HBBLoginRes_HBBLoginResType_SERVER_ERROR;
constexpr int HBBLoginRes_HBBLoginResType_HBBLoginResType_ARRAYSIZE = HBBLoginRes_HBBLoginResType_HBBLoginResType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBLoginRes_HBBLoginResType_descriptor();
template<typename T>
inline const std::string& HBBLoginRes_HBBLoginResType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HBBLoginRes_HBBLoginResType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HBBLoginRes_HBBLoginResType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HBBLoginRes_HBBLoginResType_descriptor(), enum_t_value);
}
inline bool HBBLoginRes_HBBLoginResType_Parse(
    const std::string& name, HBBLoginRes_HBBLoginResType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HBBLoginRes_HBBLoginResType>(
    HBBLoginRes_HBBLoginResType_descriptor(), name, value);
}
enum HBBServiceType : int {
  ONE = 0,
  ALL = 1,
  HBBServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HBBServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HBBServiceType_IsValid(int value);
constexpr HBBServiceType HBBServiceType_MIN = ONE;
constexpr HBBServiceType HBBServiceType_MAX = ALL;
constexpr int HBBServiceType_ARRAYSIZE = HBBServiceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBServiceType_descriptor();
template<typename T>
inline const std::string& HBBServiceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HBBServiceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HBBServiceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HBBServiceType_descriptor(), enum_t_value);
}
inline bool HBBServiceType_Parse(
    const std::string& name, HBBServiceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HBBServiceType>(
    HBBServiceType_descriptor(), name, value);
}
enum HBBLogLevel : int {
  XLOG_DEBUG = 0,
  XLOG_INFO = 1,
  XLOG_ERROR = 2,
  XLOG_FATAL = 3,
  HBBLogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HBBLogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HBBLogLevel_IsValid(int value);
constexpr HBBLogLevel HBBLogLevel_MIN = XLOG_DEBUG;
constexpr HBBLogLevel HBBLogLevel_MAX = XLOG_FATAL;
constexpr int HBBLogLevel_ARRAYSIZE = HBBLogLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HBBLogLevel_descriptor();
template<typename T>
inline const std::string& HBBLogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HBBLogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HBBLogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HBBLogLevel_descriptor(), enum_t_value);
}
inline bool HBBLogLevel_Parse(
    const std::string& name, HBBLogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HBBLogLevel>(
    HBBLogLevel_descriptor(), name, value);
}
// ===================================================================

class HBBMsgHead :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBMsgHead) */ {
 public:
  HBBMsgHead();
  virtual ~HBBMsgHead();

  HBBMsgHead(const HBBMsgHead& from);
  HBBMsgHead(HBBMsgHead&& from) noexcept
    : HBBMsgHead() {
    *this = ::std::move(from);
  }

  inline HBBMsgHead& operator=(const HBBMsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBMsgHead& operator=(HBBMsgHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBMsgHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBMsgHead* internal_default_instance() {
    return reinterpret_cast<const HBBMsgHead*>(
               &_HBBMsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HBBMsgHead* other);
  friend void swap(HBBMsgHead& a, HBBMsgHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBMsgHead* New() const final {
    return CreateMaybeMessage<HBBMsgHead>(nullptr);
  }

  HBBMsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBMsgHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBMsgHead& from);
  void MergeFrom(const HBBMsgHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBMsgHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBMsgHead";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 3;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 3;
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // int32 msg_size = 1;
  void clear_msg_size();
  static const int kMsgSizeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size() const;
  void set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .HBBmsg.MsgType msg_type = 2;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::HBBmsg::MsgType msg_type() const;
  void set_msg_type(::HBBmsg::MsgType value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBMsgHead)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBMsgHeart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBMsgHeart) */ {
 public:
  HBBMsgHeart();
  virtual ~HBBMsgHeart();

  HBBMsgHeart(const HBBMsgHeart& from);
  HBBMsgHeart(HBBMsgHeart&& from) noexcept
    : HBBMsgHeart() {
    *this = ::std::move(from);
  }

  inline HBBMsgHeart& operator=(const HBBMsgHeart& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBMsgHeart& operator=(HBBMsgHeart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBMsgHeart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBMsgHeart* internal_default_instance() {
    return reinterpret_cast<const HBBMsgHeart*>(
               &_HBBMsgHeart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HBBMsgHeart* other);
  friend void swap(HBBMsgHeart& a, HBBMsgHeart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBMsgHeart* New() const final {
    return CreateMaybeMessage<HBBMsgHeart>(nullptr);
  }

  HBBMsgHeart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBMsgHeart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBMsgHeart& from);
  void MergeFrom(const HBBMsgHeart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBMsgHeart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBMsgHeart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBMsgHeart)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBMessageRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBMessageRes) */ {
 public:
  HBBMessageRes();
  virtual ~HBBMessageRes();

  HBBMessageRes(const HBBMessageRes& from);
  HBBMessageRes(HBBMessageRes&& from) noexcept
    : HBBMessageRes() {
    *this = ::std::move(from);
  }

  inline HBBMessageRes& operator=(const HBBMessageRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBMessageRes& operator=(HBBMessageRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBMessageRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBMessageRes* internal_default_instance() {
    return reinterpret_cast<const HBBMessageRes*>(
               &_HBBMessageRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(HBBMessageRes* other);
  friend void swap(HBBMessageRes& a, HBBMessageRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBMessageRes* New() const final {
    return CreateMaybeMessage<HBBMessageRes>(nullptr);
  }

  HBBMessageRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBMessageRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBMessageRes& from);
  void MergeFrom(const HBBMessageRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBMessageRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBMessageRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HBBMessageRes_HBBReturn HBBReturn;
  static constexpr HBBReturn OK =
    HBBMessageRes_HBBReturn_OK;
  static constexpr HBBReturn ERROR =
    HBBMessageRes_HBBReturn_ERROR;
  static inline bool HBBReturn_IsValid(int value) {
    return HBBMessageRes_HBBReturn_IsValid(value);
  }
  static constexpr HBBReturn HBBReturn_MIN =
    HBBMessageRes_HBBReturn_HBBReturn_MIN;
  static constexpr HBBReturn HBBReturn_MAX =
    HBBMessageRes_HBBReturn_HBBReturn_MAX;
  static constexpr int HBBReturn_ARRAYSIZE =
    HBBMessageRes_HBBReturn_HBBReturn_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HBBReturn_descriptor() {
    return HBBMessageRes_HBBReturn_descriptor();
  }
  template<typename T>
  static inline const std::string& HBBReturn_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HBBReturn>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HBBReturn_Name.");
    return HBBMessageRes_HBBReturn_Name(enum_t_value);
  }
  static inline bool HBBReturn_Parse(const std::string& name,
      HBBReturn* value) {
    return HBBMessageRes_HBBReturn_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // .HBBmsg.HBBMessageRes.HBBReturn return = 1;
  void clear_return_();
  static const int kReturnFieldNumber = 1;
  ::HBBmsg::HBBMessageRes_HBBReturn return_() const;
  void set_return_(::HBBmsg::HBBMessageRes_HBBReturn value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBMessageRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int return__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBRegisterReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBRegisterReq) */ {
 public:
  HBBRegisterReq();
  virtual ~HBBRegisterReq();

  HBBRegisterReq(const HBBRegisterReq& from);
  HBBRegisterReq(HBBRegisterReq&& from) noexcept
    : HBBRegisterReq() {
    *this = ::std::move(from);
  }

  inline HBBRegisterReq& operator=(const HBBRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBRegisterReq& operator=(HBBRegisterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBRegisterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBRegisterReq* internal_default_instance() {
    return reinterpret_cast<const HBBRegisterReq*>(
               &_HBBRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(HBBRegisterReq* other);
  friend void swap(HBBRegisterReq& a, HBBRegisterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBRegisterReq* New() const final {
    return CreateMaybeMessage<HBBRegisterReq>(nullptr);
  }

  HBBRegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBRegisterReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBRegisterReq& from);
  void MergeFrom(const HBBRegisterReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBRegisterReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBRegisterReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBRegisterReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBServiceMap_HBBService :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBServiceMap.HBBService) */ {
 public:
  HBBServiceMap_HBBService();
  virtual ~HBBServiceMap_HBBService();

  HBBServiceMap_HBBService(const HBBServiceMap_HBBService& from);
  HBBServiceMap_HBBService(HBBServiceMap_HBBService&& from) noexcept
    : HBBServiceMap_HBBService() {
    *this = ::std::move(from);
  }

  inline HBBServiceMap_HBBService& operator=(const HBBServiceMap_HBBService& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBServiceMap_HBBService& operator=(HBBServiceMap_HBBService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBServiceMap_HBBService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBServiceMap_HBBService* internal_default_instance() {
    return reinterpret_cast<const HBBServiceMap_HBBService*>(
               &_HBBServiceMap_HBBService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(HBBServiceMap_HBBService* other);
  friend void swap(HBBServiceMap_HBBService& a, HBBServiceMap_HBBService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBServiceMap_HBBService* New() const final {
    return CreateMaybeMessage<HBBServiceMap_HBBService>(nullptr);
  }

  HBBServiceMap_HBBService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBServiceMap_HBBService>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBServiceMap_HBBService& from);
  void MergeFrom(const HBBServiceMap_HBBService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBServiceMap_HBBService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBServiceMap.HBBService";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBServiceMap.HBBService)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBServiceMap_HBBServiceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBServiceMap.HBBServiceList) */ {
 public:
  HBBServiceMap_HBBServiceList();
  virtual ~HBBServiceMap_HBBServiceList();

  HBBServiceMap_HBBServiceList(const HBBServiceMap_HBBServiceList& from);
  HBBServiceMap_HBBServiceList(HBBServiceMap_HBBServiceList&& from) noexcept
    : HBBServiceMap_HBBServiceList() {
    *this = ::std::move(from);
  }

  inline HBBServiceMap_HBBServiceList& operator=(const HBBServiceMap_HBBServiceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBServiceMap_HBBServiceList& operator=(HBBServiceMap_HBBServiceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBServiceMap_HBBServiceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBServiceMap_HBBServiceList* internal_default_instance() {
    return reinterpret_cast<const HBBServiceMap_HBBServiceList*>(
               &_HBBServiceMap_HBBServiceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(HBBServiceMap_HBBServiceList* other);
  friend void swap(HBBServiceMap_HBBServiceList& a, HBBServiceMap_HBBServiceList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBServiceMap_HBBServiceList* New() const final {
    return CreateMaybeMessage<HBBServiceMap_HBBServiceList>(nullptr);
  }

  HBBServiceMap_HBBServiceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBServiceMap_HBBServiceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBServiceMap_HBBServiceList& from);
  void MergeFrom(const HBBServiceMap_HBBServiceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBServiceMap_HBBServiceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBServiceMap.HBBServiceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HBBmsg.HBBServiceMap.HBBService service = 1;
  int service_size() const;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  ::HBBmsg::HBBServiceMap_HBBService* mutable_service(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HBBmsg::HBBServiceMap_HBBService >*
      mutable_service();
  const ::HBBmsg::HBBServiceMap_HBBService& service(int index) const;
  ::HBBmsg::HBBServiceMap_HBBService* add_service();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HBBmsg::HBBServiceMap_HBBService >&
      service() const;

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBServiceMap.HBBServiceList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HBBmsg::HBBServiceMap_HBBService > service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBServiceMap_ServiceMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HBBServiceMap_ServiceMapEntry_DoNotUse, 
    std::string, ::HBBmsg::HBBServiceMap_HBBServiceList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HBBServiceMap_ServiceMapEntry_DoNotUse, 
    std::string, ::HBBmsg::HBBServiceMap_HBBServiceList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HBBServiceMap_ServiceMapEntry_DoNotUse();
  HBBServiceMap_ServiceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HBBServiceMap_ServiceMapEntry_DoNotUse& other);
  static const HBBServiceMap_ServiceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HBBServiceMap_ServiceMapEntry_DoNotUse*>(&_HBBServiceMap_ServiceMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "HBBmsg.HBBServiceMap.ServiceMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class HBBServiceMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBServiceMap) */ {
 public:
  HBBServiceMap();
  virtual ~HBBServiceMap();

  HBBServiceMap(const HBBServiceMap& from);
  HBBServiceMap(HBBServiceMap&& from) noexcept
    : HBBServiceMap() {
    *this = ::std::move(from);
  }

  inline HBBServiceMap& operator=(const HBBServiceMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBServiceMap& operator=(HBBServiceMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBServiceMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBServiceMap* internal_default_instance() {
    return reinterpret_cast<const HBBServiceMap*>(
               &_HBBServiceMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(HBBServiceMap* other);
  friend void swap(HBBServiceMap& a, HBBServiceMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBServiceMap* New() const final {
    return CreateMaybeMessage<HBBServiceMap>(nullptr);
  }

  HBBServiceMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBServiceMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBServiceMap& from);
  void MergeFrom(const HBBServiceMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBServiceMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBServiceMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HBBServiceMap_HBBService HBBService;
  typedef HBBServiceMap_HBBServiceList HBBServiceList;

  // accessors -------------------------------------------------------

  // map<string, .HBBmsg.HBBServiceMap.HBBServiceList> service_map = 1;
  int service_map_size() const;
  void clear_service_map();
  static const int kServiceMapFieldNumber = 1;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >&
      service_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >*
      mutable_service_map();

  // .HBBmsg.HBBMessageRes res = 2;
  bool has_res() const;
  void clear_res();
  static const int kResFieldNumber = 2;
  const ::HBBmsg::HBBMessageRes& res() const;
  ::HBBmsg::HBBMessageRes* release_res();
  ::HBBmsg::HBBMessageRes* mutable_res();
  void set_allocated_res(::HBBmsg::HBBMessageRes* res);

  // .HBBmsg.HBBServiceType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::HBBmsg::HBBServiceType type() const;
  void set_type(::HBBmsg::HBBServiceType value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBServiceMap)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HBBServiceMap_ServiceMapEntry_DoNotUse,
      std::string, ::HBBmsg::HBBServiceMap_HBBServiceList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > service_map_;
  ::HBBmsg::HBBMessageRes* res_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBGetServiceReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBGetServiceReq) */ {
 public:
  HBBGetServiceReq();
  virtual ~HBBGetServiceReq();

  HBBGetServiceReq(const HBBGetServiceReq& from);
  HBBGetServiceReq(HBBGetServiceReq&& from) noexcept
    : HBBGetServiceReq() {
    *this = ::std::move(from);
  }

  inline HBBGetServiceReq& operator=(const HBBGetServiceReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBGetServiceReq& operator=(HBBGetServiceReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBGetServiceReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBGetServiceReq* internal_default_instance() {
    return reinterpret_cast<const HBBGetServiceReq*>(
               &_HBBGetServiceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(HBBGetServiceReq* other);
  friend void swap(HBBGetServiceReq& a, HBBGetServiceReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBGetServiceReq* New() const final {
    return CreateMaybeMessage<HBBGetServiceReq>(nullptr);
  }

  HBBGetServiceReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBGetServiceReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBGetServiceReq& from);
  void MergeFrom(const HBBGetServiceReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBGetServiceReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBGetServiceReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .HBBmsg.HBBServiceType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::HBBmsg::HBBServiceType type() const;
  void set_type(::HBBmsg::HBBServiceType value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBGetServiceReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBAddLogReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBAddLogReq) */ {
 public:
  HBBAddLogReq();
  virtual ~HBBAddLogReq();

  HBBAddLogReq(const HBBAddLogReq& from);
  HBBAddLogReq(HBBAddLogReq&& from) noexcept
    : HBBAddLogReq() {
    *this = ::std::move(from);
  }

  inline HBBAddLogReq& operator=(const HBBAddLogReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBAddLogReq& operator=(HBBAddLogReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBAddLogReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBAddLogReq* internal_default_instance() {
    return reinterpret_cast<const HBBAddLogReq*>(
               &_HBBAddLogReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(HBBAddLogReq* other);
  friend void swap(HBBAddLogReq& a, HBBAddLogReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBAddLogReq* New() const final {
    return CreateMaybeMessage<HBBAddLogReq>(nullptr);
  }

  HBBAddLogReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBAddLogReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBAddLogReq& from);
  void MergeFrom(const HBBAddLogReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBAddLogReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBAddLogReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_ip = 1;
  void clear_service_ip();
  static const int kServiceIpFieldNumber = 1;
  const std::string& service_ip() const;
  void set_service_ip(const std::string& value);
  void set_service_ip(std::string&& value);
  void set_service_ip(const char* value);
  void set_service_ip(const char* value, size_t size);
  std::string* mutable_service_ip();
  std::string* release_service_ip();
  void set_allocated_service_ip(std::string* service_ip);

  // string service_name = 3;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 3;
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // bytes log_txt = 4;
  void clear_log_txt();
  static const int kLogTxtFieldNumber = 4;
  const std::string& log_txt() const;
  void set_log_txt(const std::string& value);
  void set_log_txt(std::string&& value);
  void set_log_txt(const char* value);
  void set_log_txt(const void* value, size_t size);
  std::string* mutable_log_txt();
  std::string* release_log_txt();
  void set_allocated_log_txt(std::string* log_txt);

  // string filename = 7;
  void clear_filename();
  static const int kFilenameFieldNumber = 7;
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // int32 service_port = 2;
  void clear_service_port();
  static const int kServicePortFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 service_port() const;
  void set_service_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 log_time = 5;
  void clear_log_time();
  static const int kLogTimeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 log_time() const;
  void set_log_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .HBBmsg.HBBLogLevel log_level = 6;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 6;
  ::HBBmsg::HBBLogLevel log_level() const;
  void set_log_level(::HBBmsg::HBBLogLevel value);

  // int32 line = 8;
  void clear_line();
  static const int kLineFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBAddLogReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_txt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_time_;
  int log_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBLoginReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBLoginReq) */ {
 public:
  HBBLoginReq();
  virtual ~HBBLoginReq();

  HBBLoginReq(const HBBLoginReq& from);
  HBBLoginReq(HBBLoginReq&& from) noexcept
    : HBBLoginReq() {
    *this = ::std::move(from);
  }

  inline HBBLoginReq& operator=(const HBBLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBLoginReq& operator=(HBBLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBLoginReq* internal_default_instance() {
    return reinterpret_cast<const HBBLoginReq*>(
               &_HBBLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(HBBLoginReq* other);
  friend void swap(HBBLoginReq& a, HBBLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBLoginReq* New() const final {
    return CreateMaybeMessage<HBBLoginReq>(nullptr);
  }

  HBBLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBLoginReq& from);
  void MergeFrom(const HBBLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBLoginReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBLoginReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// -------------------------------------------------------------------

class HBBLoginRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HBBmsg.HBBLoginRes) */ {
 public:
  HBBLoginRes();
  virtual ~HBBLoginRes();

  HBBLoginRes(const HBBLoginRes& from);
  HBBLoginRes(HBBLoginRes&& from) noexcept
    : HBBLoginRes() {
    *this = ::std::move(from);
  }

  inline HBBLoginRes& operator=(const HBBLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBBLoginRes& operator=(HBBLoginRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBBLoginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBBLoginRes* internal_default_instance() {
    return reinterpret_cast<const HBBLoginRes*>(
               &_HBBLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(HBBLoginRes* other);
  friend void swap(HBBLoginRes& a, HBBLoginRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBBLoginRes* New() const final {
    return CreateMaybeMessage<HBBLoginRes>(nullptr);
  }

  HBBLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBBLoginRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBBLoginRes& from);
  void MergeFrom(const HBBLoginRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBBLoginRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HBBmsg.HBBLoginRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_HBBmsg_2eproto);
    return ::descriptor_table_HBBmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HBBLoginRes_HBBLoginResType HBBLoginResType;
  static constexpr HBBLoginResType NONE =
    HBBLoginRes_HBBLoginResType_NONE;
  static constexpr HBBLoginResType LOGGING =
    HBBLoginRes_HBBLoginResType_LOGGING;
  static constexpr HBBLoginResType OK =
    HBBLoginRes_HBBLoginResType_OK;
  static constexpr HBBLoginResType ERROR =
    HBBLoginRes_HBBLoginResType_ERROR;
  static constexpr HBBLoginResType NOUSER =
    HBBLoginRes_HBBLoginResType_NOUSER;
  static constexpr HBBLoginResType SERVER_ERROR =
    HBBLoginRes_HBBLoginResType_SERVER_ERROR;
  static inline bool HBBLoginResType_IsValid(int value) {
    return HBBLoginRes_HBBLoginResType_IsValid(value);
  }
  static constexpr HBBLoginResType HBBLoginResType_MIN =
    HBBLoginRes_HBBLoginResType_HBBLoginResType_MIN;
  static constexpr HBBLoginResType HBBLoginResType_MAX =
    HBBLoginRes_HBBLoginResType_HBBLoginResType_MAX;
  static constexpr int HBBLoginResType_ARRAYSIZE =
    HBBLoginRes_HBBLoginResType_HBBLoginResType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HBBLoginResType_descriptor() {
    return HBBLoginRes_HBBLoginResType_descriptor();
  }
  template<typename T>
  static inline const std::string& HBBLoginResType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HBBLoginResType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HBBLoginResType_Name.");
    return HBBLoginRes_HBBLoginResType_Name(enum_t_value);
  }
  static inline bool HBBLoginResType_Parse(const std::string& name,
      HBBLoginResType* value) {
    return HBBLoginRes_HBBLoginResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // string rolename = 4;
  void clear_rolename();
  static const int kRolenameFieldNumber = 4;
  const std::string& rolename() const;
  void set_rolename(const std::string& value);
  void set_rolename(std::string&& value);
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  std::string* mutable_rolename();
  std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);

  // string username = 5;
  void clear_username();
  static const int kUsernameFieldNumber = 5;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // .HBBmsg.HBBLoginRes.HBBLoginResType res = 1;
  void clear_res();
  static const int kResFieldNumber = 1;
  ::HBBmsg::HBBLoginRes_HBBLoginResType res() const;
  void set_res(::HBBmsg::HBBLoginRes_HBBLoginResType value);

  // int32 expired_time = 3;
  void clear_expired_time();
  static const int kExpiredTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 expired_time() const;
  void set_expired_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:HBBmsg.HBBLoginRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int res_;
  ::PROTOBUF_NAMESPACE_ID::int32 expired_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_HBBmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HBBMsgHead

// int32 msg_size = 1;
inline void HBBMsgHead::clear_msg_size() {
  msg_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBBMsgHead::msg_size() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBMsgHead.msg_size)
  return msg_size_;
}
inline void HBBMsgHead::set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_size_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBMsgHead.msg_size)
}

// .HBBmsg.MsgType msg_type = 2;
inline void HBBMsgHead::clear_msg_type() {
  msg_type_ = 0;
}
inline ::HBBmsg::MsgType HBBMsgHead::msg_type() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBMsgHead.msg_type)
  return static_cast< ::HBBmsg::MsgType >(msg_type_);
}
inline void HBBMsgHead::set_msg_type(::HBBmsg::MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBMsgHead.msg_type)
}

// string service_name = 3;
inline void HBBMsgHead::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBMsgHead::service_name() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBMsgHead.service_name)
  return service_name_.GetNoArena();
}
inline void HBBMsgHead::set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBMsgHead.service_name)
}
inline void HBBMsgHead::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBMsgHead.service_name)
}
inline void HBBMsgHead::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBMsgHead.service_name)
}
inline void HBBMsgHead::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBMsgHead.service_name)
}
inline std::string* HBBMsgHead::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBMsgHead.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBMsgHead::release_service_name() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBMsgHead.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBMsgHead::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBMsgHead.service_name)
}

// -------------------------------------------------------------------

// HBBMsgHeart

// int64 count = 1;
inline void HBBMsgHeart::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HBBMsgHeart::count() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBMsgHeart.count)
  return count_;
}
inline void HBBMsgHeart::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBMsgHeart.count)
}

// -------------------------------------------------------------------

// HBBMessageRes

// .HBBmsg.HBBMessageRes.HBBReturn return = 1;
inline void HBBMessageRes::clear_return_() {
  return__ = 0;
}
inline ::HBBmsg::HBBMessageRes_HBBReturn HBBMessageRes::return_() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBMessageRes.return)
  return static_cast< ::HBBmsg::HBBMessageRes_HBBReturn >(return__);
}
inline void HBBMessageRes::set_return_(::HBBmsg::HBBMessageRes_HBBReturn value) {
  
  return__ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBMessageRes.return)
}

// bytes msg = 2;
inline void HBBMessageRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBMessageRes::msg() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBMessageRes.msg)
  return msg_.GetNoArena();
}
inline void HBBMessageRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBMessageRes.msg)
}
inline void HBBMessageRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBMessageRes.msg)
}
inline void HBBMessageRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBMessageRes.msg)
}
inline void HBBMessageRes::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBMessageRes.msg)
}
inline std::string* HBBMessageRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBMessageRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBMessageRes::release_msg() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBMessageRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBMessageRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBMessageRes.msg)
}

// -------------------------------------------------------------------

// HBBRegisterReq

// string name = 1;
inline void HBBRegisterReq::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBRegisterReq::name() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBRegisterReq.name)
  return name_.GetNoArena();
}
inline void HBBRegisterReq::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBRegisterReq.name)
}
inline void HBBRegisterReq::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBRegisterReq.name)
}
inline void HBBRegisterReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBRegisterReq.name)
}
inline void HBBRegisterReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBRegisterReq.name)
}
inline std::string* HBBRegisterReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBRegisterReq.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBRegisterReq::release_name() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBRegisterReq.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBRegisterReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBRegisterReq.name)
}

// int32 port = 2;
inline void HBBRegisterReq::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBBRegisterReq::port() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBRegisterReq.port)
  return port_;
}
inline void HBBRegisterReq::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBRegisterReq.port)
}

// string ip = 3;
inline void HBBRegisterReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBRegisterReq::ip() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBRegisterReq.ip)
  return ip_.GetNoArena();
}
inline void HBBRegisterReq::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBRegisterReq.ip)
}
inline void HBBRegisterReq::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBRegisterReq.ip)
}
inline void HBBRegisterReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBRegisterReq.ip)
}
inline void HBBRegisterReq::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBRegisterReq.ip)
}
inline std::string* HBBRegisterReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBRegisterReq.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBRegisterReq::release_ip() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBRegisterReq.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBRegisterReq::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBRegisterReq.ip)
}

// -------------------------------------------------------------------

// HBBServiceMap_HBBService

// string name = 1;
inline void HBBServiceMap_HBBService::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBServiceMap_HBBService::name() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBServiceMap.HBBService.name)
  return name_.GetNoArena();
}
inline void HBBServiceMap_HBBService::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBServiceMap.HBBService.name)
}
inline void HBBServiceMap_HBBService::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBServiceMap.HBBService.name)
}
inline void HBBServiceMap_HBBService::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBServiceMap.HBBService.name)
}
inline void HBBServiceMap_HBBService::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBServiceMap.HBBService.name)
}
inline std::string* HBBServiceMap_HBBService::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBServiceMap.HBBService.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBServiceMap_HBBService::release_name() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBServiceMap.HBBService.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBServiceMap_HBBService::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBServiceMap.HBBService.name)
}

// string ip = 2;
inline void HBBServiceMap_HBBService::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBServiceMap_HBBService::ip() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBServiceMap.HBBService.ip)
  return ip_.GetNoArena();
}
inline void HBBServiceMap_HBBService::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBServiceMap.HBBService.ip)
}
inline void HBBServiceMap_HBBService::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBServiceMap.HBBService.ip)
}
inline void HBBServiceMap_HBBService::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBServiceMap.HBBService.ip)
}
inline void HBBServiceMap_HBBService::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBServiceMap.HBBService.ip)
}
inline std::string* HBBServiceMap_HBBService::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBServiceMap.HBBService.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBServiceMap_HBBService::release_ip() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBServiceMap.HBBService.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBServiceMap_HBBService::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBServiceMap.HBBService.ip)
}

// int32 port = 3;
inline void HBBServiceMap_HBBService::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBBServiceMap_HBBService::port() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBServiceMap.HBBService.port)
  return port_;
}
inline void HBBServiceMap_HBBService::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBServiceMap.HBBService.port)
}

// -------------------------------------------------------------------

// HBBServiceMap_HBBServiceList

// repeated .HBBmsg.HBBServiceMap.HBBService service = 1;
inline int HBBServiceMap_HBBServiceList::service_size() const {
  return service_.size();
}
inline void HBBServiceMap_HBBServiceList::clear_service() {
  service_.Clear();
}
inline ::HBBmsg::HBBServiceMap_HBBService* HBBServiceMap_HBBServiceList::mutable_service(int index) {
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBServiceMap.HBBServiceList.service)
  return service_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HBBmsg::HBBServiceMap_HBBService >*
HBBServiceMap_HBBServiceList::mutable_service() {
  // @@protoc_insertion_point(field_mutable_list:HBBmsg.HBBServiceMap.HBBServiceList.service)
  return &service_;
}
inline const ::HBBmsg::HBBServiceMap_HBBService& HBBServiceMap_HBBServiceList::service(int index) const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBServiceMap.HBBServiceList.service)
  return service_.Get(index);
}
inline ::HBBmsg::HBBServiceMap_HBBService* HBBServiceMap_HBBServiceList::add_service() {
  // @@protoc_insertion_point(field_add:HBBmsg.HBBServiceMap.HBBServiceList.service)
  return service_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HBBmsg::HBBServiceMap_HBBService >&
HBBServiceMap_HBBServiceList::service() const {
  // @@protoc_insertion_point(field_list:HBBmsg.HBBServiceMap.HBBServiceList.service)
  return service_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HBBServiceMap

// map<string, .HBBmsg.HBBServiceMap.HBBServiceList> service_map = 1;
inline int HBBServiceMap::service_map_size() const {
  return service_map_.size();
}
inline void HBBServiceMap::clear_service_map() {
  service_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >&
HBBServiceMap::service_map() const {
  // @@protoc_insertion_point(field_map:HBBmsg.HBBServiceMap.service_map)
  return service_map_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::HBBmsg::HBBServiceMap_HBBServiceList >*
HBBServiceMap::mutable_service_map() {
  // @@protoc_insertion_point(field_mutable_map:HBBmsg.HBBServiceMap.service_map)
  return service_map_.MutableMap();
}

// .HBBmsg.HBBMessageRes res = 2;
inline bool HBBServiceMap::has_res() const {
  return this != internal_default_instance() && res_ != nullptr;
}
inline void HBBServiceMap::clear_res() {
  if (GetArenaNoVirtual() == nullptr && res_ != nullptr) {
    delete res_;
  }
  res_ = nullptr;
}
inline const ::HBBmsg::HBBMessageRes& HBBServiceMap::res() const {
  const ::HBBmsg::HBBMessageRes* p = res_;
  // @@protoc_insertion_point(field_get:HBBmsg.HBBServiceMap.res)
  return p != nullptr ? *p : *reinterpret_cast<const ::HBBmsg::HBBMessageRes*>(
      &::HBBmsg::_HBBMessageRes_default_instance_);
}
inline ::HBBmsg::HBBMessageRes* HBBServiceMap::release_res() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBServiceMap.res)
  
  ::HBBmsg::HBBMessageRes* temp = res_;
  res_ = nullptr;
  return temp;
}
inline ::HBBmsg::HBBMessageRes* HBBServiceMap::mutable_res() {
  
  if (res_ == nullptr) {
    auto* p = CreateMaybeMessage<::HBBmsg::HBBMessageRes>(GetArenaNoVirtual());
    res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBServiceMap.res)
  return res_;
}
inline void HBBServiceMap::set_allocated_res(::HBBmsg::HBBMessageRes* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete res_;
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    
  } else {
    
  }
  res_ = res;
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBServiceMap.res)
}

// .HBBmsg.HBBServiceType type = 3;
inline void HBBServiceMap::clear_type() {
  type_ = 0;
}
inline ::HBBmsg::HBBServiceType HBBServiceMap::type() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBServiceMap.type)
  return static_cast< ::HBBmsg::HBBServiceType >(type_);
}
inline void HBBServiceMap::set_type(::HBBmsg::HBBServiceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBServiceMap.type)
}

// -------------------------------------------------------------------

// HBBGetServiceReq

// string name = 1;
inline void HBBGetServiceReq::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBGetServiceReq::name() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBGetServiceReq.name)
  return name_.GetNoArena();
}
inline void HBBGetServiceReq::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBGetServiceReq.name)
}
inline void HBBGetServiceReq::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBGetServiceReq.name)
}
inline void HBBGetServiceReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBGetServiceReq.name)
}
inline void HBBGetServiceReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBGetServiceReq.name)
}
inline std::string* HBBGetServiceReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBGetServiceReq.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBGetServiceReq::release_name() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBGetServiceReq.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBGetServiceReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBGetServiceReq.name)
}

// .HBBmsg.HBBServiceType type = 2;
inline void HBBGetServiceReq::clear_type() {
  type_ = 0;
}
inline ::HBBmsg::HBBServiceType HBBGetServiceReq::type() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBGetServiceReq.type)
  return static_cast< ::HBBmsg::HBBServiceType >(type_);
}
inline void HBBGetServiceReq::set_type(::HBBmsg::HBBServiceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBGetServiceReq.type)
}

// -------------------------------------------------------------------

// HBBAddLogReq

// string service_ip = 1;
inline void HBBAddLogReq::clear_service_ip() {
  service_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBAddLogReq::service_ip() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.service_ip)
  return service_ip_.GetNoArena();
}
inline void HBBAddLogReq::set_service_ip(const std::string& value) {
  
  service_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.service_ip)
}
inline void HBBAddLogReq::set_service_ip(std::string&& value) {
  
  service_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBAddLogReq.service_ip)
}
inline void HBBAddLogReq::set_service_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBAddLogReq.service_ip)
}
inline void HBBAddLogReq::set_service_ip(const char* value, size_t size) {
  
  service_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBAddLogReq.service_ip)
}
inline std::string* HBBAddLogReq::mutable_service_ip() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBAddLogReq.service_ip)
  return service_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBAddLogReq::release_service_ip() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBAddLogReq.service_ip)
  
  return service_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBAddLogReq::set_allocated_service_ip(std::string* service_ip) {
  if (service_ip != nullptr) {
    
  } else {
    
  }
  service_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_ip);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBAddLogReq.service_ip)
}

// int32 service_port = 2;
inline void HBBAddLogReq::clear_service_port() {
  service_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBBAddLogReq::service_port() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.service_port)
  return service_port_;
}
inline void HBBAddLogReq::set_service_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_port_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.service_port)
}

// string service_name = 3;
inline void HBBAddLogReq::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBAddLogReq::service_name() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.service_name)
  return service_name_.GetNoArena();
}
inline void HBBAddLogReq::set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.service_name)
}
inline void HBBAddLogReq::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBAddLogReq.service_name)
}
inline void HBBAddLogReq::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBAddLogReq.service_name)
}
inline void HBBAddLogReq::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBAddLogReq.service_name)
}
inline std::string* HBBAddLogReq::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBAddLogReq.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBAddLogReq::release_service_name() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBAddLogReq.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBAddLogReq::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBAddLogReq.service_name)
}

// bytes log_txt = 4;
inline void HBBAddLogReq::clear_log_txt() {
  log_txt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBAddLogReq::log_txt() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.log_txt)
  return log_txt_.GetNoArena();
}
inline void HBBAddLogReq::set_log_txt(const std::string& value) {
  
  log_txt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.log_txt)
}
inline void HBBAddLogReq::set_log_txt(std::string&& value) {
  
  log_txt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBAddLogReq.log_txt)
}
inline void HBBAddLogReq::set_log_txt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_txt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBAddLogReq.log_txt)
}
inline void HBBAddLogReq::set_log_txt(const void* value, size_t size) {
  
  log_txt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBAddLogReq.log_txt)
}
inline std::string* HBBAddLogReq::mutable_log_txt() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBAddLogReq.log_txt)
  return log_txt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBAddLogReq::release_log_txt() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBAddLogReq.log_txt)
  
  return log_txt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBAddLogReq::set_allocated_log_txt(std::string* log_txt) {
  if (log_txt != nullptr) {
    
  } else {
    
  }
  log_txt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_txt);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBAddLogReq.log_txt)
}

// int32 log_time = 5;
inline void HBBAddLogReq::clear_log_time() {
  log_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBBAddLogReq::log_time() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.log_time)
  return log_time_;
}
inline void HBBAddLogReq::set_log_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  log_time_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.log_time)
}

// .HBBmsg.HBBLogLevel log_level = 6;
inline void HBBAddLogReq::clear_log_level() {
  log_level_ = 0;
}
inline ::HBBmsg::HBBLogLevel HBBAddLogReq::log_level() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.log_level)
  return static_cast< ::HBBmsg::HBBLogLevel >(log_level_);
}
inline void HBBAddLogReq::set_log_level(::HBBmsg::HBBLogLevel value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.log_level)
}

// string filename = 7;
inline void HBBAddLogReq::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBAddLogReq::filename() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.filename)
  return filename_.GetNoArena();
}
inline void HBBAddLogReq::set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.filename)
}
inline void HBBAddLogReq::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBAddLogReq.filename)
}
inline void HBBAddLogReq::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBAddLogReq.filename)
}
inline void HBBAddLogReq::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBAddLogReq.filename)
}
inline std::string* HBBAddLogReq::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBAddLogReq.filename)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBAddLogReq::release_filename() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBAddLogReq.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBAddLogReq::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBAddLogReq.filename)
}

// int32 line = 8;
inline void HBBAddLogReq::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBBAddLogReq::line() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBAddLogReq.line)
  return line_;
}
inline void HBBAddLogReq::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBAddLogReq.line)
}

// -------------------------------------------------------------------

// HBBLoginReq

// string username = 1;
inline void HBBLoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBLoginReq::username() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBLoginReq.username)
  return username_.GetNoArena();
}
inline void HBBLoginReq::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBLoginReq.username)
}
inline void HBBLoginReq::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBLoginReq.username)
}
inline void HBBLoginReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBLoginReq.username)
}
inline void HBBLoginReq::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBLoginReq.username)
}
inline std::string* HBBLoginReq::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBLoginReq.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBLoginReq::release_username() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBLoginReq.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBLoginReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBLoginReq.username)
}

// string password = 2;
inline void HBBLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBLoginReq::password() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBLoginReq.password)
  return password_.GetNoArena();
}
inline void HBBLoginReq::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBLoginReq.password)
}
inline void HBBLoginReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBLoginReq.password)
}
inline void HBBLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBLoginReq.password)
}
inline void HBBLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBLoginReq.password)
}
inline std::string* HBBLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBLoginReq.password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBLoginReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBLoginReq.password)
}

// -------------------------------------------------------------------

// HBBLoginRes

// .HBBmsg.HBBLoginRes.HBBLoginResType res = 1;
inline void HBBLoginRes::clear_res() {
  res_ = 0;
}
inline ::HBBmsg::HBBLoginRes_HBBLoginResType HBBLoginRes::res() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBLoginRes.res)
  return static_cast< ::HBBmsg::HBBLoginRes_HBBLoginResType >(res_);
}
inline void HBBLoginRes::set_res(::HBBmsg::HBBLoginRes_HBBLoginResType value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBLoginRes.res)
}

// string token = 2;
inline void HBBLoginRes::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBLoginRes::token() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBLoginRes.token)
  return token_.GetNoArena();
}
inline void HBBLoginRes::set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBLoginRes.token)
}
inline void HBBLoginRes::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBLoginRes.token)
}
inline void HBBLoginRes::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBLoginRes.token)
}
inline void HBBLoginRes::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBLoginRes.token)
}
inline std::string* HBBLoginRes::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBLoginRes.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBLoginRes::release_token() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBLoginRes.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBLoginRes::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBLoginRes.token)
}

// int32 expired_time = 3;
inline void HBBLoginRes::clear_expired_time() {
  expired_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HBBLoginRes::expired_time() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBLoginRes.expired_time)
  return expired_time_;
}
inline void HBBLoginRes::set_expired_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expired_time_ = value;
  // @@protoc_insertion_point(field_set:HBBmsg.HBBLoginRes.expired_time)
}

// string rolename = 4;
inline void HBBLoginRes::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBLoginRes::rolename() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBLoginRes.rolename)
  return rolename_.GetNoArena();
}
inline void HBBLoginRes::set_rolename(const std::string& value) {
  
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBLoginRes.rolename)
}
inline void HBBLoginRes::set_rolename(std::string&& value) {
  
  rolename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBLoginRes.rolename)
}
inline void HBBLoginRes::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBLoginRes.rolename)
}
inline void HBBLoginRes::set_rolename(const char* value, size_t size) {
  
  rolename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBLoginRes.rolename)
}
inline std::string* HBBLoginRes::mutable_rolename() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBLoginRes.rolename)
  return rolename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBLoginRes::release_rolename() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBLoginRes.rolename)
  
  return rolename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBLoginRes::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBLoginRes.rolename)
}

// string username = 5;
inline void HBBLoginRes::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HBBLoginRes::username() const {
  // @@protoc_insertion_point(field_get:HBBmsg.HBBLoginRes.username)
  return username_.GetNoArena();
}
inline void HBBLoginRes::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HBBmsg.HBBLoginRes.username)
}
inline void HBBLoginRes::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HBBmsg.HBBLoginRes.username)
}
inline void HBBLoginRes::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HBBmsg.HBBLoginRes.username)
}
inline void HBBLoginRes::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HBBmsg.HBBLoginRes.username)
}
inline std::string* HBBLoginRes::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:HBBmsg.HBBLoginRes.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HBBLoginRes::release_username() {
  // @@protoc_insertion_point(field_release:HBBmsg.HBBLoginRes.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HBBLoginRes::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:HBBmsg.HBBLoginRes.username)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HBBmsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::HBBmsg::HBBMessageRes_HBBReturn> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HBBmsg::HBBMessageRes_HBBReturn>() {
  return ::HBBmsg::HBBMessageRes_HBBReturn_descriptor();
}
template <> struct is_proto_enum< ::HBBmsg::HBBLoginRes_HBBLoginResType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HBBmsg::HBBLoginRes_HBBLoginResType>() {
  return ::HBBmsg::HBBLoginRes_HBBLoginResType_descriptor();
}
template <> struct is_proto_enum< ::HBBmsg::HBBServiceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HBBmsg::HBBServiceType>() {
  return ::HBBmsg::HBBServiceType_descriptor();
}
template <> struct is_proto_enum< ::HBBmsg::HBBLogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HBBmsg::HBBLogLevel>() {
  return ::HBBmsg::HBBLogLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HBBmsg_2eproto
